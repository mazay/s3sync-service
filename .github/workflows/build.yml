name: Build

env:
  GO_VERSION: 1.19
  ATTACHMENTS: ""
  GOPATH: ${{ github.workspace }}

on:
  release:
    types:
      - published
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Chechout
        uses: actions/checkout@v2
        with:
          path: ./src/github.com/${{ github.repository }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd ./src/github.com/${{ github.repository }}
          go mod download

      - name: Run tests
        env:
          RELEASE_VERSION: ${{ env.GITHUB_REF_SLUG }}
        run: |
          cd ./src/github.com/${{ github.repository }}
          make test

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./src/github.com/${{ github.repository }}/cover.out

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go-os: [darwin, windows, linux, freebsd]
        go-arch: [amd64, 386, arm, arm64]
        exclude:
          # excludes 32 bit architectures for darwin builds
          - go-os: darwin
            go-arch: 386
          - go-os: darwin
            go-arch: arm
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Chechout
        uses: actions/checkout@v2
        with:
          path: ./src/github.com/${{ github.repository }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd ./src/github.com/${{ github.repository }}
          go mod download

      - name: Build
        env:
          RELEASE_VERSION: ${{ env.GITHUB_REF_SLUG }}
          OS: ${{ matrix.go-os }}
          GOOS: ${{ matrix.go-os }}
          ARCH: ${{ matrix.go-arch }}
          GOARCH: ${{ matrix.go-arch }}
        run: |
          cd ./src/github.com/${{ github.repository }}
          make build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: ${{ github.event_name == 'release' }}
        with:
          name: s3sync-service-${{ env.GITHUB_REF_SLUG }}
          path: ./src/github.com/${{ github.repository }}/s3sync-service-*

  docker:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: test
    strategy:
      matrix:
        include:
        # empty registry for DockerHub
         - registry: ""
           username: DOCKERHUB_USERNAME
           password: DOCKERHUB_TOKEN
           base-repo: zmazay/s3sync-service
         - registry: quay.io
           username: QUAY_USERNAME
           password: QUAY_TOKEN
           base-repo: quay.io/s3sync-service/s3sync-service
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Chechout
        uses: actions/checkout@v2
        with:
          path: ./src/github.com/${{ github.repository }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Docker buildx
        env:
          RELEASE_VERSION: ${{ env.GITHUB_REF_SLUG }}
          DOCKER_BASE_REPO: ${{ matrix.base-repo }}
        run: |
          cd ./src/github.com/${{ github.repository }}
          make docker-multi-arch

  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: build
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Chechout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: s3sync-service-${{ env.GITHUB_REF_SLUG }}
          path: artifacts/

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for artifact in $(ls artifacts/*); do ATTACHMENTS="${ATTACHMENTS} -a ${artifact}"; done;
          hub release edit -m "" ${{ env.GITHUB_REF_SLUG }} ${ATTACHMENTS}
